# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
   config.vm.network "forwarded_port", guest: 8080, host: 8081, host_ip: "127.0.0.1"
   config.vm.network "forwarded_port", guest: 80, host: 81, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  config.vm.provision "shell", inline: <<-SHELL
  echo "Configuring my c00l app..."
  echo "Checking if the app directory exists..."
  if [ -d "/home/vagrant/javaApp" ]; then
    echo "Dir already exists!"
  else
    echo "Dir not found! Creating..."
    mkdir /home/vagrant/javaApp
    echo "Do not forget permissions!!"
    sudo chown -R vagrant:vagrant /home/vagrant/javaApp/
    sudo chmod +xrw /home/vagrant/javaApp 
   fi
SHELL

  ## No need to do this until the next step
  ## SELF-RECODATORY -> DO NOT FORGET THE MAVEN CFG FILE WITH THE PROXY
  # config.vm.provision "file", source: "stuff.tar", destination: "/home/vagrant/javaApp/stuff.tar"
  config.vm.provision "file", source: "app.jar", destination: "/home/vagrant/javaApp/app.jar"
	config.vm.provision "shell", inline: <<-SHELL
	#export http_proxy=""
	#export https_proxy=""
	apt-get update
	apt-get install -y maven apache2
SHELL
  config.vm.provision "shell", inline: <<-SHELL
  echo "Preparing the application..."
	cd /home/vagrant/javaApp/
  echo "Setting JAVA_HOME"
  export JAVA_HOME="/usr/lib/jvm/default-java"
  echo "Running..."
  java -jar app.jar &
SHELL
end
